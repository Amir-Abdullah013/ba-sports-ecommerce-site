// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}


// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  wishlist      WishlistItem[]
  addresses     Address[]
  profileImage  String? // Custom profile image URL

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Product Management
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  originalPrice Float?
  image       String
  images      String    // JSON string of image URLs
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  stock       Int       @default(0)
  sku         String?   @unique
  weight      Float?
  dimensions  String?   // JSON string
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  rating      Float?
  reviewCount Int       @default(0)
  tags        String    // JSON string of tags
  brandType   BrandType @default(BA_SPORTS)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    WishlistItem[]

  // PERFORMANCE: Database indexes for fast queries
  @@index([isActive])
  @@index([isFeatured])
  @@index([categoryId])
  @@index([createdAt])
  @@index([price])
  @@index([rating])
  @@index([name])
  @@index([brandType])
  @@index([isActive, isFeatured])
  @@index([categoryId, isActive])
  @@index([brandType, isActive])
  @@map("products")
}

// Order Management
model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique // Custom order number
  userId          String?
  user            User?         @relation(fields: [userId], references: [id])
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod @default(COD)
  
  // Customer Information
  customerName    String
  customerEmail   String
  customerPhone   String?
  
  // Shipping Information
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZipCode String?
  shippingCountry String        @default("Pakistan")
  
  // Billing Information
  billingAddress  String?
  billingCity     String?
  billingState    String?
  billingZipCode  String?
  billingCountry  String?
  
  // Financial Information
  subtotal        Float
  tax             Float  @default(0)
  shipping        Float  @default(0)
  codFee          Float  @default(0)
  discount        Float  @default(0)
  total           Float
  
  // Delivery Information
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  trackingNumber    String?
  notes             String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  items             OrderItem[]
  payment           Payment?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  total     Float
  
  createdAt DateTime @default(now())

  @@map("order_items")
}

// Reviews and Ratings
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

// Wishlist
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // One wishlist item per user per product
  @@map("wishlist_items")
}

// User Addresses
model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String   // 'shipping' or 'billing'
  isDefault   Boolean  @default(false)
  firstName   String
  lastName    String
  address     String
  city        String
  state       String
  zipCode     String
  country     String   @default("Pakistan")
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

// Payment Transactions
model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  order         Order         @relation(fields: [orderId], references: [id])
  amount        Float
  currency      String        @default("PKR")
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?       @unique
  gateway       String?       // Payment gateway used
  gatewayData   String?       // JSON string of gateway response data
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  COD
  HBLPAY
  STRIPE
  PAYPAL
}

enum BrandType {
  BA_SPORTS
  OTHER
}
